pipeline {
    agent any

    environment {
        DOCKER_REPO = ''
        IMAGE_TAG = "${env.BRANCH_NAME}-${env.BUILD_ID}"
        KUBE_DEPLOYMENT_NAME = 'my-deployment'
        KUBE_NAMESPACE = 'power-ranger'
    }

    stages {
        stage('Checkout') {
            steps {
<<<<<<< HEAD
                sh """
                git clone git@github.com:sanjaykumarm2001/devops-build.git
                cd devops-build/build/
                   
                   """
=======
                git 'https://github.com/sanjaykumarm2001/devops-build/'
>>>>>>> 548dfb961acb2905e75d6412cc05751b6d9f04f7
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'dev') {
                        DOCKER_REPO = 'sanjaykumar2001/dev'
                    } else if (env.BRANCH_NAME == 'master') {
                        DOCKER_REPO = 'sanjaykumar2001/prod'
                    }

                    docker.build("${DOCKER_REPO}:${IMAGE_TAG}",'build/.')
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
<<<<<<< HEAD
                    docker.withRegistry('https://registry.hub.docker.com', 'dckr_pat_VgK0mnalRVjyuznCEUb7NTvvn4o') {
                        docker.image("${DOCKER_REPO}").push()
=======
                    docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB_CREDENTIALS') {
                        docker.image("${DOCKER_REPO}:${IMAGE_TAG}").push()
>>>>>>> 548dfb961acb2905e75d6412cc05751b6d9f04f7
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                    kubectl set image deployment/${KUBE_DEPLOYMENT_NAME} \
                    my-app-container=${DOCKER_REPO}:${IMAGE_TAG} \
                    --namespace=${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}